// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: microphantom.proto

#include "microphantom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr GameStateBuffer::GameStateBuffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0)
  , nb_barracks_(0)
  , min_distance_resource_base_(0)
  , max_distance_resource_base_(0)
  , no_initial_base_(0)
  , no_initial_barracks_(0)
  , resources_(0)
  , initial_resources_(0)
  , enemy_resources_loss_(0)
  , worker_move_time_(0)
  , worker_harvest_time_(0)
  , worker_return_time_(0)
  , harvest_amount_(0)
  , base_cost_(0)
  , barracks_cost_(0)
  , heavy_cost_(0)
  , light_cost_(0)
  , ranged_cost_(0)
  , my_heavy_units_(0)
  , my_light_units_(0)
  , my_ranged_units_(0)
  , initial_enemy_worker_(0)
  , observed_enemy_worker_(0)
  , observed_enemy_heavy_(0)
  , observed_enemy_light_(0)
  , observed_enemy_ranged_(0)
  , observed_enemy_worker_in_total_(0)
  , observed_enemy_heavy_in_total_(0)
  , observed_enemy_light_in_total_(0)
  , observed_enemy_ranged_in_total_(0)
  , solver_type_(0)
  , nb_samples_(0){}
struct GameStateBufferDefaultTypeInternal {
  constexpr GameStateBufferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameStateBufferDefaultTypeInternal() {}
  union {
    GameStateBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameStateBufferDefaultTypeInternal _GameStateBuffer_default_instance_;
constexpr SolutionBuffer::SolutionBuffer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_heavy_(0)
  , number_light_(0)
  , number_ranged_(0){}
struct SolutionBufferDefaultTypeInternal {
  constexpr SolutionBufferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SolutionBufferDefaultTypeInternal() {}
  union {
    SolutionBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SolutionBufferDefaultTypeInternal _SolutionBuffer_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_microphantom_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_microphantom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_microphantom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_microphantom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, time_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, nb_barracks_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, min_distance_resource_base_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, max_distance_resource_base_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, no_initial_base_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, no_initial_barracks_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, resources_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, initial_resources_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, enemy_resources_loss_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, worker_move_time_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, worker_harvest_time_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, worker_return_time_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, harvest_amount_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, base_cost_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, barracks_cost_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, heavy_cost_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, light_cost_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, ranged_cost_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, my_heavy_units_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, my_light_units_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, my_ranged_units_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, initial_enemy_worker_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_worker_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_heavy_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_light_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_ranged_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_worker_in_total_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_heavy_in_total_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_light_in_total_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, observed_enemy_ranged_in_total_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, solver_type_),
  PROTOBUF_FIELD_OFFSET(::GameStateBuffer, nb_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SolutionBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SolutionBuffer, number_heavy_),
  PROTOBUF_FIELD_OFFSET(::SolutionBuffer, number_light_),
  PROTOBUF_FIELD_OFFSET(::SolutionBuffer, number_ranged_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameStateBuffer)},
  { 37, -1, sizeof(::SolutionBuffer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameStateBuffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SolutionBuffer_default_instance_),
};

const char descriptor_table_protodef_microphantom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022microphantom.proto\"\370\006\n\017GameStateBuffer"
  "\022\014\n\004time\030\001 \001(\005\022\023\n\013nb_barracks\030\002 \001(\005\022\"\n\032m"
  "in_distance_resource_base\030\003 \001(\005\022\"\n\032max_d"
  "istance_resource_base\030\004 \001(\005\022\027\n\017no_initia"
  "l_base\030\005 \001(\005\022\033\n\023no_initial_barracks\030\006 \001("
  "\005\022\021\n\tresources\030\007 \001(\005\022\031\n\021initial_resource"
  "s\030\010 \001(\005\022\034\n\024enemy_resources_loss\030\t \001(\005\022\030\n"
  "\020worker_move_time\030\n \001(\005\022\033\n\023worker_harves"
  "t_time\030\013 \001(\005\022\032\n\022worker_return_time\030\014 \001(\005"
  "\022\026\n\016harvest_amount\030\r \001(\005\022\021\n\tbase_cost\030\016 "
  "\001(\005\022\025\n\rbarracks_cost\030\017 \001(\005\022\022\n\nheavy_cost"
  "\030\020 \001(\005\022\022\n\nlight_cost\030\021 \001(\005\022\023\n\013ranged_cos"
  "t\030\022 \001(\005\022\026\n\016my_heavy_units\030\023 \001(\005\022\026\n\016my_li"
  "ght_units\030\024 \001(\005\022\027\n\017my_ranged_units\030\025 \001(\005"
  "\022\034\n\024initial_enemy_worker\030\026 \001(\005\022\035\n\025observ"
  "ed_enemy_worker\030\027 \001(\005\022\034\n\024observed_enemy_"
  "heavy\030\030 \001(\005\022\034\n\024observed_enemy_light\030\031 \001("
  "\005\022\035\n\025observed_enemy_ranged\030\032 \001(\005\022&\n\036obse"
  "rved_enemy_worker_in_total\030\033 \001(\005\022%\n\035obse"
  "rved_enemy_heavy_in_total\030\034 \001(\005\022%\n\035obser"
  "ved_enemy_light_in_total\030\035 \001(\005\022&\n\036observ"
  "ed_enemy_ranged_in_total\030\036 \001(\005\022\023\n\013solver"
  "_type\030\037 \001(\005\022\022\n\nnb_samples\030  \001(\005\"S\n\016Solut"
  "ionBuffer\022\024\n\014number_heavy\030\001 \001(\005\022\024\n\014numbe"
  "r_light\030\002 \001(\005\022\025\n\rnumber_ranged\030\003 \001(\005B/\n\027"
  "com.microphantom.protosB\022MicroPhantomPro"
  "tosP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_microphantom_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_microphantom_2eproto = {
  false, false, 1053, descriptor_table_protodef_microphantom_2eproto, "microphantom.proto", 
  &descriptor_table_microphantom_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_microphantom_2eproto::offsets,
  file_level_metadata_microphantom_2eproto, file_level_enum_descriptors_microphantom_2eproto, file_level_service_descriptors_microphantom_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_microphantom_2eproto_getter() {
  return &descriptor_table_microphantom_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_microphantom_2eproto(&descriptor_table_microphantom_2eproto);

// ===================================================================

class GameStateBuffer::_Internal {
 public:
};

GameStateBuffer::GameStateBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameStateBuffer)
}
GameStateBuffer::GameStateBuffer(const GameStateBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&nb_samples_) -
    reinterpret_cast<char*>(&time_)) + sizeof(nb_samples_));
  // @@protoc_insertion_point(copy_constructor:GameStateBuffer)
}

inline void GameStateBuffer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nb_samples_) -
    reinterpret_cast<char*>(&time_)) + sizeof(nb_samples_));
}

GameStateBuffer::~GameStateBuffer() {
  // @@protoc_insertion_point(destructor:GameStateBuffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameStateBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameStateBuffer::ArenaDtor(void* object) {
  GameStateBuffer* _this = reinterpret_cast< GameStateBuffer* >(object);
  (void)_this;
}
void GameStateBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStateBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameStateBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStateBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_samples_) -
      reinterpret_cast<char*>(&time_)) + sizeof(nb_samples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStateBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nb_barracks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nb_barracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_distance_resource_base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_distance_resource_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_distance_resource_base = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_distance_resource_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 no_initial_base = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          no_initial_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 no_initial_barracks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          no_initial_barracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resources = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          resources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 initial_resources = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          initial_resources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enemy_resources_loss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          enemy_resources_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 worker_move_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          worker_move_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 worker_harvest_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          worker_harvest_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 worker_return_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          worker_return_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 harvest_amount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          harvest_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_cost = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          base_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 barracks_cost = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          barracks_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heavy_cost = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          heavy_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 light_cost = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          light_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ranged_cost = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ranged_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 my_heavy_units = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          my_heavy_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 my_light_units = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          my_light_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 my_ranged_units = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          my_ranged_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 initial_enemy_worker = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          initial_enemy_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_worker = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          observed_enemy_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_heavy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          observed_enemy_heavy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_light = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          observed_enemy_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_ranged = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          observed_enemy_ranged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_worker_in_total = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          observed_enemy_worker_in_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_heavy_in_total = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          observed_enemy_heavy_in_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_light_in_total = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          observed_enemy_light_in_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 observed_enemy_ranged_in_total = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          observed_enemy_ranged_in_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 solver_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          solver_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nb_samples = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          nb_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStateBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStateBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // int32 nb_barracks = 2;
  if (this->_internal_nb_barracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nb_barracks(), target);
  }

  // int32 min_distance_resource_base = 3;
  if (this->_internal_min_distance_resource_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_min_distance_resource_base(), target);
  }

  // int32 max_distance_resource_base = 4;
  if (this->_internal_max_distance_resource_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_distance_resource_base(), target);
  }

  // int32 no_initial_base = 5;
  if (this->_internal_no_initial_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_no_initial_base(), target);
  }

  // int32 no_initial_barracks = 6;
  if (this->_internal_no_initial_barracks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_no_initial_barracks(), target);
  }

  // int32 resources = 7;
  if (this->_internal_resources() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_resources(), target);
  }

  // int32 initial_resources = 8;
  if (this->_internal_initial_resources() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_initial_resources(), target);
  }

  // int32 enemy_resources_loss = 9;
  if (this->_internal_enemy_resources_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_enemy_resources_loss(), target);
  }

  // int32 worker_move_time = 10;
  if (this->_internal_worker_move_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_worker_move_time(), target);
  }

  // int32 worker_harvest_time = 11;
  if (this->_internal_worker_harvest_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_worker_harvest_time(), target);
  }

  // int32 worker_return_time = 12;
  if (this->_internal_worker_return_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_worker_return_time(), target);
  }

  // int32 harvest_amount = 13;
  if (this->_internal_harvest_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_harvest_amount(), target);
  }

  // int32 base_cost = 14;
  if (this->_internal_base_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_base_cost(), target);
  }

  // int32 barracks_cost = 15;
  if (this->_internal_barracks_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_barracks_cost(), target);
  }

  // int32 heavy_cost = 16;
  if (this->_internal_heavy_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_heavy_cost(), target);
  }

  // int32 light_cost = 17;
  if (this->_internal_light_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_light_cost(), target);
  }

  // int32 ranged_cost = 18;
  if (this->_internal_ranged_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_ranged_cost(), target);
  }

  // int32 my_heavy_units = 19;
  if (this->_internal_my_heavy_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_my_heavy_units(), target);
  }

  // int32 my_light_units = 20;
  if (this->_internal_my_light_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_my_light_units(), target);
  }

  // int32 my_ranged_units = 21;
  if (this->_internal_my_ranged_units() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_my_ranged_units(), target);
  }

  // int32 initial_enemy_worker = 22;
  if (this->_internal_initial_enemy_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_initial_enemy_worker(), target);
  }

  // int32 observed_enemy_worker = 23;
  if (this->_internal_observed_enemy_worker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_observed_enemy_worker(), target);
  }

  // int32 observed_enemy_heavy = 24;
  if (this->_internal_observed_enemy_heavy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_observed_enemy_heavy(), target);
  }

  // int32 observed_enemy_light = 25;
  if (this->_internal_observed_enemy_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_observed_enemy_light(), target);
  }

  // int32 observed_enemy_ranged = 26;
  if (this->_internal_observed_enemy_ranged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_observed_enemy_ranged(), target);
  }

  // int32 observed_enemy_worker_in_total = 27;
  if (this->_internal_observed_enemy_worker_in_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_observed_enemy_worker_in_total(), target);
  }

  // int32 observed_enemy_heavy_in_total = 28;
  if (this->_internal_observed_enemy_heavy_in_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_observed_enemy_heavy_in_total(), target);
  }

  // int32 observed_enemy_light_in_total = 29;
  if (this->_internal_observed_enemy_light_in_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_observed_enemy_light_in_total(), target);
  }

  // int32 observed_enemy_ranged_in_total = 30;
  if (this->_internal_observed_enemy_ranged_in_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_observed_enemy_ranged_in_total(), target);
  }

  // int32 solver_type = 31;
  if (this->_internal_solver_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_solver_type(), target);
  }

  // int32 nb_samples = 32;
  if (this->_internal_nb_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_nb_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStateBuffer)
  return target;
}

size_t GameStateBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStateBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 nb_barracks = 2;
  if (this->_internal_nb_barracks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nb_barracks());
  }

  // int32 min_distance_resource_base = 3;
  if (this->_internal_min_distance_resource_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_distance_resource_base());
  }

  // int32 max_distance_resource_base = 4;
  if (this->_internal_max_distance_resource_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_distance_resource_base());
  }

  // int32 no_initial_base = 5;
  if (this->_internal_no_initial_base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_initial_base());
  }

  // int32 no_initial_barracks = 6;
  if (this->_internal_no_initial_barracks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_initial_barracks());
  }

  // int32 resources = 7;
  if (this->_internal_resources() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resources());
  }

  // int32 initial_resources = 8;
  if (this->_internal_initial_resources() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_initial_resources());
  }

  // int32 enemy_resources_loss = 9;
  if (this->_internal_enemy_resources_loss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enemy_resources_loss());
  }

  // int32 worker_move_time = 10;
  if (this->_internal_worker_move_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_move_time());
  }

  // int32 worker_harvest_time = 11;
  if (this->_internal_worker_harvest_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_harvest_time());
  }

  // int32 worker_return_time = 12;
  if (this->_internal_worker_return_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_return_time());
  }

  // int32 harvest_amount = 13;
  if (this->_internal_harvest_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_harvest_amount());
  }

  // int32 base_cost = 14;
  if (this->_internal_base_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_cost());
  }

  // int32 barracks_cost = 15;
  if (this->_internal_barracks_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_barracks_cost());
  }

  // int32 heavy_cost = 16;
  if (this->_internal_heavy_cost() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heavy_cost());
  }

  // int32 light_cost = 17;
  if (this->_internal_light_cost() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_light_cost());
  }

  // int32 ranged_cost = 18;
  if (this->_internal_ranged_cost() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ranged_cost());
  }

  // int32 my_heavy_units = 19;
  if (this->_internal_my_heavy_units() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_heavy_units());
  }

  // int32 my_light_units = 20;
  if (this->_internal_my_light_units() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_light_units());
  }

  // int32 my_ranged_units = 21;
  if (this->_internal_my_ranged_units() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_my_ranged_units());
  }

  // int32 initial_enemy_worker = 22;
  if (this->_internal_initial_enemy_worker() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_initial_enemy_worker());
  }

  // int32 observed_enemy_worker = 23;
  if (this->_internal_observed_enemy_worker() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_worker());
  }

  // int32 observed_enemy_heavy = 24;
  if (this->_internal_observed_enemy_heavy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_heavy());
  }

  // int32 observed_enemy_light = 25;
  if (this->_internal_observed_enemy_light() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_light());
  }

  // int32 observed_enemy_ranged = 26;
  if (this->_internal_observed_enemy_ranged() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_ranged());
  }

  // int32 observed_enemy_worker_in_total = 27;
  if (this->_internal_observed_enemy_worker_in_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_worker_in_total());
  }

  // int32 observed_enemy_heavy_in_total = 28;
  if (this->_internal_observed_enemy_heavy_in_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_heavy_in_total());
  }

  // int32 observed_enemy_light_in_total = 29;
  if (this->_internal_observed_enemy_light_in_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_light_in_total());
  }

  // int32 observed_enemy_ranged_in_total = 30;
  if (this->_internal_observed_enemy_ranged_in_total() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observed_enemy_ranged_in_total());
  }

  // int32 solver_type = 31;
  if (this->_internal_solver_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_solver_type());
  }

  // int32 nb_samples = 32;
  if (this->_internal_nb_samples() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nb_samples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStateBuffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameStateBuffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStateBuffer::GetClassData() const { return &_class_data_; }

void GameStateBuffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GameStateBuffer *>(to)->MergeFrom(
      static_cast<const GameStateBuffer &>(from));
}


void GameStateBuffer::MergeFrom(const GameStateBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStateBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_nb_barracks() != 0) {
    _internal_set_nb_barracks(from._internal_nb_barracks());
  }
  if (from._internal_min_distance_resource_base() != 0) {
    _internal_set_min_distance_resource_base(from._internal_min_distance_resource_base());
  }
  if (from._internal_max_distance_resource_base() != 0) {
    _internal_set_max_distance_resource_base(from._internal_max_distance_resource_base());
  }
  if (from._internal_no_initial_base() != 0) {
    _internal_set_no_initial_base(from._internal_no_initial_base());
  }
  if (from._internal_no_initial_barracks() != 0) {
    _internal_set_no_initial_barracks(from._internal_no_initial_barracks());
  }
  if (from._internal_resources() != 0) {
    _internal_set_resources(from._internal_resources());
  }
  if (from._internal_initial_resources() != 0) {
    _internal_set_initial_resources(from._internal_initial_resources());
  }
  if (from._internal_enemy_resources_loss() != 0) {
    _internal_set_enemy_resources_loss(from._internal_enemy_resources_loss());
  }
  if (from._internal_worker_move_time() != 0) {
    _internal_set_worker_move_time(from._internal_worker_move_time());
  }
  if (from._internal_worker_harvest_time() != 0) {
    _internal_set_worker_harvest_time(from._internal_worker_harvest_time());
  }
  if (from._internal_worker_return_time() != 0) {
    _internal_set_worker_return_time(from._internal_worker_return_time());
  }
  if (from._internal_harvest_amount() != 0) {
    _internal_set_harvest_amount(from._internal_harvest_amount());
  }
  if (from._internal_base_cost() != 0) {
    _internal_set_base_cost(from._internal_base_cost());
  }
  if (from._internal_barracks_cost() != 0) {
    _internal_set_barracks_cost(from._internal_barracks_cost());
  }
  if (from._internal_heavy_cost() != 0) {
    _internal_set_heavy_cost(from._internal_heavy_cost());
  }
  if (from._internal_light_cost() != 0) {
    _internal_set_light_cost(from._internal_light_cost());
  }
  if (from._internal_ranged_cost() != 0) {
    _internal_set_ranged_cost(from._internal_ranged_cost());
  }
  if (from._internal_my_heavy_units() != 0) {
    _internal_set_my_heavy_units(from._internal_my_heavy_units());
  }
  if (from._internal_my_light_units() != 0) {
    _internal_set_my_light_units(from._internal_my_light_units());
  }
  if (from._internal_my_ranged_units() != 0) {
    _internal_set_my_ranged_units(from._internal_my_ranged_units());
  }
  if (from._internal_initial_enemy_worker() != 0) {
    _internal_set_initial_enemy_worker(from._internal_initial_enemy_worker());
  }
  if (from._internal_observed_enemy_worker() != 0) {
    _internal_set_observed_enemy_worker(from._internal_observed_enemy_worker());
  }
  if (from._internal_observed_enemy_heavy() != 0) {
    _internal_set_observed_enemy_heavy(from._internal_observed_enemy_heavy());
  }
  if (from._internal_observed_enemy_light() != 0) {
    _internal_set_observed_enemy_light(from._internal_observed_enemy_light());
  }
  if (from._internal_observed_enemy_ranged() != 0) {
    _internal_set_observed_enemy_ranged(from._internal_observed_enemy_ranged());
  }
  if (from._internal_observed_enemy_worker_in_total() != 0) {
    _internal_set_observed_enemy_worker_in_total(from._internal_observed_enemy_worker_in_total());
  }
  if (from._internal_observed_enemy_heavy_in_total() != 0) {
    _internal_set_observed_enemy_heavy_in_total(from._internal_observed_enemy_heavy_in_total());
  }
  if (from._internal_observed_enemy_light_in_total() != 0) {
    _internal_set_observed_enemy_light_in_total(from._internal_observed_enemy_light_in_total());
  }
  if (from._internal_observed_enemy_ranged_in_total() != 0) {
    _internal_set_observed_enemy_ranged_in_total(from._internal_observed_enemy_ranged_in_total());
  }
  if (from._internal_solver_type() != 0) {
    _internal_set_solver_type(from._internal_solver_type());
  }
  if (from._internal_nb_samples() != 0) {
    _internal_set_nb_samples(from._internal_nb_samples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStateBuffer::CopyFrom(const GameStateBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStateBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateBuffer::IsInitialized() const {
  return true;
}

void GameStateBuffer::InternalSwap(GameStateBuffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStateBuffer, nb_samples_)
      + sizeof(GameStateBuffer::nb_samples_)
      - PROTOBUF_FIELD_OFFSET(GameStateBuffer, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStateBuffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_microphantom_2eproto_getter, &descriptor_table_microphantom_2eproto_once,
      file_level_metadata_microphantom_2eproto[0]);
}

// ===================================================================

class SolutionBuffer::_Internal {
 public:
};

SolutionBuffer::SolutionBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SolutionBuffer)
}
SolutionBuffer::SolutionBuffer(const SolutionBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&number_heavy_, &from.number_heavy_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_ranged_) -
    reinterpret_cast<char*>(&number_heavy_)) + sizeof(number_ranged_));
  // @@protoc_insertion_point(copy_constructor:SolutionBuffer)
}

inline void SolutionBuffer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&number_heavy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_ranged_) -
    reinterpret_cast<char*>(&number_heavy_)) + sizeof(number_ranged_));
}

SolutionBuffer::~SolutionBuffer() {
  // @@protoc_insertion_point(destructor:SolutionBuffer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SolutionBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SolutionBuffer::ArenaDtor(void* object) {
  SolutionBuffer* _this = reinterpret_cast< SolutionBuffer* >(object);
  (void)_this;
}
void SolutionBuffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolutionBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SolutionBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:SolutionBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_heavy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_ranged_) -
      reinterpret_cast<char*>(&number_heavy_)) + sizeof(number_ranged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolutionBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 number_heavy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_heavy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_ranged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_ranged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolutionBuffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolutionBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number_heavy = 1;
  if (this->_internal_number_heavy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_heavy(), target);
  }

  // int32 number_light = 2;
  if (this->_internal_number_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number_light(), target);
  }

  // int32 number_ranged = 3;
  if (this->_internal_number_ranged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_number_ranged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolutionBuffer)
  return target;
}

size_t SolutionBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SolutionBuffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number_heavy = 1;
  if (this->_internal_number_heavy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_heavy());
  }

  // int32 number_light = 2;
  if (this->_internal_number_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_light());
  }

  // int32 number_ranged = 3;
  if (this->_internal_number_ranged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_ranged());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SolutionBuffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SolutionBuffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SolutionBuffer::GetClassData() const { return &_class_data_; }

void SolutionBuffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SolutionBuffer *>(to)->MergeFrom(
      static_cast<const SolutionBuffer &>(from));
}


void SolutionBuffer::MergeFrom(const SolutionBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolutionBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number_heavy() != 0) {
    _internal_set_number_heavy(from._internal_number_heavy());
  }
  if (from._internal_number_light() != 0) {
    _internal_set_number_light(from._internal_number_light());
  }
  if (from._internal_number_ranged() != 0) {
    _internal_set_number_ranged(from._internal_number_ranged());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SolutionBuffer::CopyFrom(const SolutionBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolutionBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionBuffer::IsInitialized() const {
  return true;
}

void SolutionBuffer::InternalSwap(SolutionBuffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolutionBuffer, number_ranged_)
      + sizeof(SolutionBuffer::number_ranged_)
      - PROTOBUF_FIELD_OFFSET(SolutionBuffer, number_heavy_)>(
          reinterpret_cast<char*>(&number_heavy_),
          reinterpret_cast<char*>(&other->number_heavy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolutionBuffer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_microphantom_2eproto_getter, &descriptor_table_microphantom_2eproto_once,
      file_level_metadata_microphantom_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameStateBuffer* Arena::CreateMaybeMessage< ::GameStateBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameStateBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::SolutionBuffer* Arena::CreateMaybeMessage< ::SolutionBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SolutionBuffer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
